//The start and end notations are <?php and ?>
<?php 
//The echo keyword is used for output

echo " \\ for a back slash called as an escape sequence used for quotes and many other non-alphanumeric marks and \n for next line";
echo “<p> this is the paragraph</p>”;

echo "hello" . " world"; //string concatenation: combines two strings

//declaring a variable and printing
$var = "string";
echo &var; //prints string

//PHP strings allow us to place variables directly into double quoted strings. These variables will be parsed which means the computer will read the variables as the value they hold rather than see them as just a sequence of characters. PHP allows us to specifically indicate the variable name by wrapping it in curly braces to avoid any confusion. Ex: echo "I have always been obsessed with ${noun}s. I'm ${adjective}ish. I'm always ${verb}ing."; 

//concatenating assignment operator is .=
$full_name = "Aisle"; 
$full_name .= " Nevertell"; 
echo $full_name; // Prints: Aisle Nevertell

//Assign by reference:
$first_player_rank = "Beginner"; 
$second_player_rank = $first_player_rank; 
echo $second_player_rank; // Prints: Beginner 
$first_player_rank = "Intermediate"; // Reassign the value of $first_player_rank 
echo $second_player_rank; // Still Prints: Beginner

//Reference assignment operator is =& .
$first_player_rank = "Beginner"; 
$second_player_rank =& $first_player_rank; 
echo $second_player_rank; // Prints: Beginner 
$first_player_rank = "Intermediate"; // Reassign the value of $first_player_rank 
echo $second_player_rank; // Prints: Intermediate

$very_bad_unclear_name = "15 chicken wings";
$order =& $very_bad_unclear_name;
$order .= "better"; 
 echo "\nYour order is: $very_bad_unclear_name."; //prints Your order is: 15 chicken wingsbetter.

//Return statements:
function countdown() { 
echo "4, 3, 2, 1, "; 
return "blastoff!"; 
}
$return_value = countdown(); // Prints: 4, 3, 2, 1, 
echo $return_value; // Prints: blastoff!
//Return NULL: nothing is printed or 0
//Valid: echo fn(fn1(“”)); (parametric functions)

//Default parameter: 
function greetFriend($name = "old chum") { 
echo "Hello, $name!"; 
}; 
greetFriend("Marvin"); // Prints: Hello, Marvin! 
greetFriend(); // Prints: Hello, old chum!
//If not allotted, it results an error.

//Pass by reference: 
function addX ($param) { 
$param = $param . "X"; 
echo $param; 
}; 
$word = "Hello"; 
addX($word); // Prints: HelloX 
echo $word; // Prints: Hello

function addXPermanently (&$param) { 
$param = $param . "X"; 
echo $param; 
}; 
$word = "Hello"; 
addXPermanently($word); // Prints: HelloX 
echo $word; // Prints: HelloX

echo("This works!\n"); 
echo "This also works!\n"; 
//echo("This would NOT work", "\n"); 
echo "Buuuut!", " ", "This", " ", "does!", "\n";

//gettype($word); //returns datatype
var_dump($word); //prints details
strrev($word); //reverses the string
strtolower($word); //prints all letters in lower case
strtoupper($word); //prints all letters in capitals
str_repeat($word, 5); //prints it 5 times, can take an integer as variable input
$text = 'This is a test';
echo strlen($text); // 14
echo substr_count($text, 'is'); // 2

//Rand() returns a random integer. 
$max = getrandmax(); 
echo $max; 
echo rand(); // Prints a number between 0 and $max 
echo rand(1, 2); // Prints either 1 or 2 
echo rand(5, 10); // Prints a number between 5 and 10 (inclusive!) 

/*
$text = 'This is a test';
echo strlen($text); // 14
echo substr_count($text, 'is'); // 2
// the string is reduced to 's is a test', so it prints 1
echo substr_count($text, 'is', 3);
// the text is reduced to 's i', so it prints 0
echo substr_count($text, 'is', 3, 3);
// generates a warning because 5+10 > 14
echo substr_count($text, 'is', 5, 10);
// prints only 1, because it doesn't count overlapped substrings
$text2 = 'gcdgcdgcd';
echo substr_count($text2, 'gcdgcd');
Documentation; str_pad(); php;
ceil() returns the rounded new total (added with tip). Pi() to get the precision of π.  

Lesson 5: ordered arrays
PHP can also store elements of multiple data types. count() with echo gives the number of elements in the array. [] for short array syntax. Usually it’s array(). When we print $a with echo, it prints the word “Array”. To print the contents, print_r() is used. We can convert the array into a string using echo implode() (to print the elements), which takes two arguments - a string to use between each element (the $glue), and the array to be joined together (the $pieces). 
We add elements to the end of an array by taking the variable name and appending square brackets ([]), the assignment operator (=), and the element we want to add, or we can reassign by putting the index value in between the [], we can add elements individually wherever we desire to.
The array_pop() function takes an array as argument and removes its last element by setting it to null, decreasing its length by one and returns the removed elemarray_pop($stack);hrent. The array_push function takes an array as argument along with some new elements as arguments, which are added to the end of the array, finally returns all the elements in the array. The array_shift() function removes first element of array and returns that value. The array_unshift() function takes array as its first argument, and followed elements as arguments are added to the beginning of the array and returns all elements of the array.
Nested array: arrays as elements of an array. Ex: 
•	$nested_arr = [[2, 4], [3, 9], [4, 16]]; $first_el = $nested_arr[0][0]; echo $first_el; // Prints: 2
•	$very_nested = [1, "b", 33, ["cat", 6.1, [9, "LOST!", 6], "mouse"], 7.1]; echo $very_nested[3][2][1] //prints “LOST!”

associative arrays
Whenever we need to access a value, we’ll be able to use the associated key to find it. 
Key => value. key can be integer or string. value can be rand() also.
Short array syntax: every pair of array in different lines inside[]. The other is array().
Echo $a prints “Array”; echo implode() prints just values; print_r($a) prints all the contents.
With different format: $my_array["capybara"] = "cutest"; echo $my_array["capybara"]; // Prints: cutest.
$favorites = ["favorite_food"=>"pizza", "favorite_place"=>"my dreams", "FAVORITE_CASE"=>"CAPS","favorite_person"=>"myself"]; echo $favorites["favorite" . "_" . "food"]; // Prints: pizza $key = "favorite_place"; echo $favorites[$key]; // Prints: my dreams echo $favorites[strtoupper("favorite_case")]; // Prints: CAPS
We have unset($name[“…”] to remove a key=>value pair. 
*/
//mixing ordered and ssociative arrays
$ordered = [99, 1, 7, 8];
$ordered["special"] = "Cool!";
echo $ordered[3]; // Prints: 8
echo $ordered["special"]; // Prints: Cool!

//When we add an element to an array without specifying a key (e.g. using array_push()), PHP will associate it with the “next” integer key. If no integer keys have been used, it will associate it with the key 0, otherwise it will associate it one more than the largest integer used thus far. This behavior is the same whether the array is being used as an ordered array or an associative array. Only use the empty square brackets syntax (or functions like array_push()) with ordered arrays. 
$num_array = [1000 => "one thousand", 100 => "one hundred", 600 => "six hundred"];
$num_array[] = "New Element in \$num_array";
echo $num_array[1001]; // Prints: New Element in $num_array
$animals_array = ["panda"=>"very cute", "lizard"=>"cute", "cockroach"=>"not very cute"];
array_push($animals_array, "New Element in \$animals_array");
echo $animals_array[0]; // Prints: New Element in $animals_array
//joining of arrays using "+" as $c = $a + $b; if both have some same key the c takes value of a

//assign by value (directly assign the value to the key) or reference (create a function with &$name as argument and assign the value to the key, if no & then the assigned value doesn't change permanently)

?>
